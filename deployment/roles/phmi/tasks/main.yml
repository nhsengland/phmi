---
# set up the PHMI project itself
- name: Creates project dir
  become: true
  file:
    path: "{{ PROJECT_PATH }}"
    state: directory
    mode: 0777

- name: Setup the Git repo
  become: true
  git:
    repo: "{{ GIT_REPO }}"
    version: "{{ GIT_BRANCH }}"
    dest: "{{ PROJECT_PATH }}"
    accept_hostkey: yes
    force: yes

- name: Creates log dir
  file:
    path: "{{ LOG_DIR }}"
    state: directory

- name: Creates config dir
  file:
    path: "{{ PROJECT_PATH }}/vars"
    state: directory

- name: Create configs
  become: true
  template:
    src: "templates/nginx_site.conf.jinja2"
    dest: "{{ PROJECT_PATH }}/vars/nginx_site.conf"
    mode: 0744
    owner: ubuntu

- name: Create environment variable files directory
  file:
    path: "{{ PROJECT_PATH }}/env_vars"
    state: directory

- name: Create environment variable files for envdir
  template:
    src: "{{ item }}"
    dest: "{{ PROJECT_PATH }}/env_vars/{{ item | basename | regex_replace('\\.jinja2', '') }}"
    mode: 0744
    owner: ubuntu
  with_fileglob:
    - templates/settings/*.jinja2

- name: Install python dependencies
  args:
    chdir: "{{ PROJECT_PATH}}"
  command: "pipenv install"

- name: Run Django database migrations
  args:
    chdir: "{{ PROJECT_PATH}}"
  command: "envdir env_vars pipenv run python manage.py migrate"

- name: Run Django collectstatic
  args:
    chdir: "{{ PROJECT_PATH}}"
  command: "envdir env_vars pipenv run python manage.py collectstatic --noinput"

- name: Load in initial data
  args:
    chdir: "{{ PROJECT_PATH}}"
  command: envdir env_vars make load-data

- name: Remove old nginx default
  become: true
  file:
    state: absent
    path: "/etc/nginx/sites-available/default"

- name: Symlink nginx
  become: true
  file:
    src: "{{ PROJECT_PATH }}/vars/nginx_site.conf"
    dest: "/etc/nginx/sites-available/default"
    owner: root
    group: root
    state: link

- name: Restart nginx
  become: true
  service:
    name: nginx
    state: restarted
    enabled: yes

- name: Kill gunicorn
  become: yes
  command: "pkill gunicorn"
  ignore_errors: True

- name: Make the etc directory
  become: yes
  file:
    path: /etc/circus
    state: directory

- name: Create circus config
  become: yes
  template:
    src: "templates/circus.ini.jinja2"
    dest: "/etc/circus/circus.ini"

- name: Create the circus service
  become: yes
  copy:
    src: "templates/circus.service"
    dest: "/etc/systemd/system/circus.service"

- name: Restart circus
  become: true
  service:
    name: circus
    state: restarted
    enabled: yes
